.PHONY: all clean

_COLOR_BEGIN := $(shell tput setaf 99)
_COLOR_END := $(shell tput sgr0)

PROJECT_NAME := cpp-lab
PROJECT_FULL_NAME := jdeokkim/cpp-lab

PROJECT_PREFIX := $(_COLOR_BEGIN)$(PROJECT_FULL_NAME):$(_COLOR_END)

BINARY_PATH := bin
INCLUDE_PATH := include
SOURCE_PATH := src

SOURCES := $(wildcard $(SOURCE_PATH)/*.cpp)
TARGETS := $(patsubst $(SOURCE_PATH)/%.cpp,$(BINARY_PATH)/%.out,$(SOURCES))

HOST_PLATFORM := UNKNOWN

ifeq ($(OS),Windows_NT)
    ifeq "$(findstring ;,$(PATH))" ";"
        PROJECT_PREFIX := $(PROJECT_FULL_NAME):
    endif

# MINGW-W64 or MSYS2...?
    HOST_PLATFORM := WINDOWS
else
    UNAME = $(shell uname 2>/dev/null)

    ifeq ($(UNAME),Linux)
        HOST_PLATFORM = LINUX
    endif
endif

CC := g++
CFLAGS := -D_DEFAULT_SOURCE -g $(INCLUDE_PATH:%=-I%) -lm -O2

PLATFORM := $(HOST_PLATFORM)

ifeq ($(PLATFORM),WINDOWS)
    TARGETS := $(patsubst $(SOURCE_PATH)/%.cpp,$(BINARY_PATH)/%.exe,$(SOURCES))

    ifneq ($(HOST_PLATFORM),WINDOWS)
        CC := x86_64-w64-mingw32-g++
    endif
endif

all: pre-build build post-build

pre-build:
    @echo "$(PROJECT_PREFIX) Using: '$(CC)' to build this project."
    
build: $(TARGETS)

$(BINARY_PATH)/%.out: $(SOURCE_PATH)/%.cpp
    @mkdir -p $(BINARY_PATH)
    @echo "$(PROJECT_PREFIX) Compiling: $@ (from $<)"
    @$(CC) $< -o $@ $(CFLAGS) $(LDFLAGS) $(LDLIBS) $(WEBFLAGS)
    
$(BINARY_PATH)/%.exe: $(SOURCE_PATH)/%.cpp
    @mkdir -p $(BINARY_PATH)
    @echo "$(PROJECT_PREFIX) Compiling: $@ (from $<)"
    @$(CC) $< -o $@ $(CFLAGS) $(LDFLAGS) $(LDLIBS) $(WEBFLAGS)
    
post-build:
    @echo "$(PROJECT_PREFIX) Build complete."

clean:
    @echo "$(PROJECT_PREFIX) Cleaning up."
    @rm -rf $(BINARY_PATH)/*.exe
    @rm -rf $(BINARY_PATH)/*.out
    @rm -rf $(SOURCE_PATH)/*.o